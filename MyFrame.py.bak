# -*- coding: UTF-8 -*-
#
# generated by wxGlade 1.0.5 on Fri Jun 23 23:05:45 2023
#

import wx
# begin wxGlade: dependencies
import wx.grid
# end wxGlade

# begin wxGlade: extracode
from DialogConnections import DialogConnections
from milvus_service import connect_milvus, list_database
 
def refresh_databases(lbDatabase):
  dbs = list_database()
  lbDatabase.Clear()
  lbDatabase.Append(dbs)
  if len(dbs) > 0:
    lbDatabase.SetSelection(0)
# end wxGlade


class MyFrame(wx.Frame):
        def __init__(self, *args, **kwds):
                # begin wxGlade: MyFrame.__init__
                kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
                wx.Frame.__init__(self, *args, **kwds)
                self.SetSize((950, 666))
                self.SetTitle("frame")

                # Menu Bar
                self.frame_menubar = wx.MenuBar()
                wxglade_tmp_menu = wx.Menu()
                self.frame_menubar.Append(wxglade_tmp_menu, "&File")
                wxglade_tmp_menu = wx.Menu()
                self.frame_menubar.Append(wxglade_tmp_menu, "&Edit")
                wxglade_tmp_menu = wx.Menu()
                self.frame_menubar.Append(wxglade_tmp_menu, "&Options")
                self.SetMenuBar(self.frame_menubar)
                # Menu Bar end

                self.panel_1 = wx.Panel(self, wx.ID_ANY)

                sizer_1 = wx.BoxSizer(wx.VERTICAL)

                sizer_2 = wx.BoxSizer(wx.HORIZONTAL)
                sizer_1.Add(sizer_2, 0, wx.EXPAND, 0)

                self.btnConnections = wx.Button(self.panel_1, wx.ID_ANY, "Connections")
                sizer_2.Add(self.btnConnections, 0, wx.ALIGN_CENTER_VERTICAL | wx.BOTTOM | wx.FIXED_MINSIZE | wx.LEFT | wx.TOP, 5)

                self.button_2 = wx.Button(self.panel_1, wx.ID_ANY, "button_2")
                sizer_2.Add(self.button_2, 0, wx.ALIGN_CENTER_VERTICAL | wx.BOTTOM | wx.LEFT | wx.TOP, 5)

                self.window_1 = wx.SplitterWindow(self.panel_1, wx.ID_ANY)
                self.window_1.SetMinimumPaneSize(20)
                sizer_1.Add(self.window_1, 1, wx.ALL | wx.EXPAND, 0)

                self.window_1_pane_1 = wx.Panel(self.window_1, wx.ID_ANY)
                self.window_1_pane_1.SetBackgroundColour(wx.Colour(192, 192, 192))

                sizer_3 = wx.BoxSizer(wx.VERTICAL)

                sizer_5 = wx.BoxSizer(wx.HORIZONTAL)
                sizer_3.Add(sizer_5, 0, wx.EXPAND, 0)

                label_1 = wx.StaticText(self.window_1_pane_1, wx.ID_ANY, "Databases")
                sizer_5.Add(label_1, 0, wx.ALIGN_BOTTOM | wx.LEFT | wx.RIGHT, 4)

                sizer_6 = wx.BoxSizer(wx.HORIZONTAL)
                sizer_5.Add(sizer_6, 1, wx.EXPAND, 0)

                self.panel_2 = wx.Panel(self.window_1_pane_1, wx.ID_ANY)
                sizer_6.Add(self.panel_2, 1, wx.EXPAND, 0)

                self.btnNewDatabase = wx.Button(self.window_1_pane_1, wx.ID_ANY, "New")
                sizer_6.Add(self.btnNewDatabase, 0, 0, 0)

                self.lbDatabases = wx.ListBox(self.window_1_pane_1, wx.ID_ANY, choices=["Database 1", "Database 2", "Database 3", "Database 4", ""])
                sizer_3.Add(self.lbDatabases, 1, wx.BOTTOM | wx.EXPAND | wx.LEFT | wx.RIGHT, 4)

                sizer_7 = wx.BoxSizer(wx.HORIZONTAL)
                sizer_3.Add(sizer_7, 0, wx.EXPAND, 0)

                label_2 = wx.StaticText(self.window_1_pane_1, wx.ID_ANY, "Collections")
                sizer_7.Add(label_2, 0, wx.ALIGN_BOTTOM | wx.LEFT | wx.RIGHT, 4)

                sizer_8 = wx.BoxSizer(wx.HORIZONTAL)
                sizer_7.Add(sizer_8, 1, wx.EXPAND, 0)

                self.panel_3 = wx.Panel(self.window_1_pane_1, wx.ID_ANY)
                sizer_8.Add(self.panel_3, 1, wx.EXPAND, 0)

                self.btnNewCollection = wx.Button(self.window_1_pane_1, wx.ID_ANY, "New")
                sizer_8.Add(self.btnNewCollection, 0, 0, 0)

                self.connected = False
                self.lbCollections = wx.ListBox(self.window_1_pane_1, wx.ID_ANY, choices=["choice 1"])
                sizer_3.Add(self.lbCollections, 3, wx.BOTTOM | wx.EXPAND | wx.LEFT | wx.RIGHT, 4)

                self.window_1_pane_2 = wx.Panel(self.window_1, wx.ID_ANY)

                sizer_4 = wx.BoxSizer(wx.VERTICAL)

                self.notebook_1 = wx.Notebook(self.window_1_pane_2, wx.ID_ANY)
                sizer_4.Add(self.notebook_1, 0, wx.EXPAND, 0)

                self.notebook_1_pane_1 = wx.Panel(self.notebook_1, wx.ID_ANY)
                self.notebook_1.AddPage(self.notebook_1_pane_1, "notebook_1_pane_1")

                self.grid_1 = wx.grid.Grid(self.window_1_pane_2, wx.ID_ANY, size=(1, 1))
                self.grid_1.CreateGrid(10, 0)
                sizer_4.Add(self.grid_1, 1, wx.EXPAND, 0)

                self.window_1_pane_2.SetSizer(sizer_4)

                self.window_1_pane_1.SetSizer(sizer_3)

                self.window_1.SplitVertically(self.window_1_pane_1, self.window_1_pane_2, 180)

                self.panel_1.SetSizer(sizer_1)

                self.Layout()

                self.Bind(wx.EVT_BUTTON, self.onConnections, self.btnConnections)
                # end wxGlade

        def onConnections(self, event):  # wxGlade: MyFrame.<event_handler>
            with DialogConnections(self) as dialogConnections:
              result = dialogConnections.ShowModal()
              if result == wx.ID_CANCEL:
                print('cancel')
              if result == wx.ID_OK:
                print('ok')
                selectedItemCount = dialogConnections.lcConnections.GetSelectedItemCount()
                print('selectedItemCount', selectedItemCount)
                selectedIndex = dialogConnections.lcConnections.GetFirstSelected()
                print('selectedIndex', selectedIndex)
                selectedHost = dialogConnections.lcConnections.GetItem(selectedIndex, 2).Text
                print('selectedHost', selectedHost)
                selectedPort = dialogConnections.lcConnections.GetItem(selectedIndex, 3).Text
                print('selectedPort', selectedPort)
                connect_milvus(host=selectedHost, port=selectedPort)
                refresh_databases(self.lbDatabases)

# end of class MyFrame
